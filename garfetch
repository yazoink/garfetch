#!/bin/bash

# dependencies: pciutils (GPU), MPC (MPD)

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

EDGE_COLOR=$RED
USERNAME_COLOR=$YELLOW
AT_SIGN_COLOR=$GREEN
HOSTNAME_COLOR=$CYAN
ARROW_COLOR=$MAGENTA
TITLE_COLOR=$BLUE
ART_COLOR=$YELLOW

CONFIG="garfetch.conf"

# default config options
PRINT_USER_AT_HOST=true
PRINT_COLOR_SAMPLE=true
ASCII="ascii/garfield2.txt"
SEPARATOR="|"
ARROW="-> "
COLOR_SAMPLE="-*-"
COLOR_SAMPLE_BEFORE="\`"
COLOR_SAMPLE_AFTER=""
USER_AT_HOST_BEFORE=" _-{"
USER_AT_HOST_AFTER="}-_"
MODULE_LIST=(
  "Distro"
  "Host"
  "Kernel"
  "Desktop"
  "Terminal"
  "Shell"
  "CPU"
  "GPU"
  "Memory"
  #"MPD"
)

function main() {
  [ -f "./$CONFIG" ] && { source "$CONFIG"; } \
    || { [ -f "$HOME/.config/garfetch/$CONFIG" ] \
      && source "$HOME/.config/garfetch/$CONFIG"; }

  [ -f "$ASCII" ] \
    || { echo "Error: Ascii art not found. Make sure to include the correct path to it in $CONFIG"
      exit 1; }

  readarray -t asciiArray < "$ASCII"

  longestLineLength=0
  for line in "${asciiArray[@]}"; do
    currentLineLength=${#line}
    [ $currentLineLength -gt $longestLineLength ] \
      && longestLineLength=$currentLineLength
  done

  declare -A systemInfoValues=(
    ["Distro"]="getOperatingSystem"
    ["Host"]="getHost"
    ["Kernel"]="echo $(uname -s) $(uname -r)"
    ["Desktop"]="getDesktop"
    ["Terminal"]="getTerminal"
    ["Shell"]="basename $SHELL"
    ["CPU"]="getCPU"
    ["GPU"]="getGPU"
    ["Memory"]="getRAM"
    ["MPD"]="mpc current"
  )

  declare -a systemInfo
  for module in "${MODULE_LIST[@]}"; do
    value="$(${systemInfoValues["$module"]})"
    string="${TITLE_COLOR}$module:${NC} $value"
    systemInfo+=("$string")
  done
  
  { [ $PRINT_USER_AT_HOST == true ] && offset=2; } || offset=1

  len=${#asciiArray[@]}
  [ $((${#systemInfo[@]} + offset)) -gt $len ] && len=$((${#systemInfo[@]} + offset))

  [ $PRINT_COLOR_SAMPLE == false ] && ((len--))

  for ((i=0; i<=len;i++)); do
    [ -n "${asciiArray[i]}" ] && \
      printf "${ART_COLOR}%s${NC}" "${asciiArray[i]}"

    spaces=$((longestLineLength - ${#asciiArray[i]}))
    for ((j=0; j<spaces; j++)); do
      printf " "
    done

    [ $i -gt 0 ] && {
      if [ $i -eq 1 ] && [ $PRINT_USER_AT_HOST == true ]; then
        printf "  ${EDGE_COLOR}%s${USERNAME_COLOR}%s${AT_SIGN_COLOR}@${HOSTNAME_COLOR}%s${RED}%s${NC}" \
          "$USER_AT_HOST_BEFORE" "${USER:-$(whoami)}" "${HOSTNAME:-$(hostname)}" "$USER_AT_HOST_AFTER"
      else
        if [ $i -eq $((${#systemInfo[@]} + offset)) ] && [ $PRINT_COLOR_SAMPLE == true ]; then
          printf "  ${EDGE_COLOR}%s${RED}%s${GREEN}%s${YELLOW}%s${BLUE}%s${MAGENTA}%s${CYAN}%s${EDGE_COLOR}%s${NC}" \
            "$COLOR_SAMPLE_BEFORE" "$COLOR_SAMPLE" "$COLOR_SAMPLE" \
            "$COLOR_SAMPLE" "$COLOR_SAMPLE" "$COLOR_SAMPLE" \
            "$COLOR_SAMPLE" "$COLOR_SAMPLE_AFTER"
        elif [ $i -lt $((${#systemInfo[@]} + offset)) ]; then 
          printf "  ${EDGE_COLOR}%s${ARROW_COLOR}%s${NC}${systemInfo[i - $offset]}" \
            "$SEPARATOR" "$ARROW"
        fi
      fi
    }
    printf "\n"
  done
}

function getCPU() {
  cpu="$(grep "model name" /proc/cpuinfo | sed 's/.*: //' | head -n 1)"
  echo "$cpu"
}

function getDesktop() {
  if [ -n "$XDG_CURRENT_DESKTOP" ]; then
    echo "$XDG_CURRENT_DESKTOP"
  elif [ -n "$DESKTOP_SESSION" ]; then
    echo "$DESKTOP_SESSION"
  else
    echo "Unknown"
  fi
}

function getGPU() {
  # stole this from https://github.com/ufuayk/brofetch
  gpu="$(lspci | grep -i 'vga\|3d' | grep -i 'nvidia\|amd\|intel\|virtio' \
    | head -n 1 | awk -F ': ' '{print $2}' \
    | sed 's/.*\[\(.*\)\].*/\1/' | tr -d '\n\r')"
  echo "$gpu"
}

function getHost() {
  [ -f "/sys/devices/virtual/dmi/id/product_name" ] \
    && cat "/sys/devices/virtual/dmi/id/product_name" \
    || echo "Unknown"
}

function getRAM() {
  ram="$(free -h | awk '/^Mem:/ {print $3}')/$(free -h | awk '/^Mem:/ {print $2}')"
  echo "$ram"
}

function getOperatingSystem() {
  if . /etc/os-release; then
    echo "$PRETTY_NAME"
  elif . /etc/lsb-release; then
    echo "$DISTRIB_DESCRIPTION"
  else
    operatingSystem="$(uname -o)"
    echo "$operatingSystem"
  fi
}

function getTerminal() {
  [ -n "$TERM" ] \
    && terminal="$TERM" \
    || terminal="Unknown"
  echo "$terminal"
}

main
